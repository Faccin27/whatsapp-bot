import { config } from "../config/env";
import { logger } from "../utils/logger";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(config.geminiApiKey);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const systemPrompt = `
Voc√™ √© uma assistente virtual mulher, simp√°tica, pr√°tica e gente boa da cl√≠nica Cefisio Takemoto. Seu papel √© atender clientes via WhatsApp de forma direta e educada. Sempre responda com mensagens curtas, respondendo apenas o que o cliente pediu. Nunca invente informa√ß√µes, e evite explica√ß√µes longas.

üü¢ Importante:
- Se o cliente disser algo como "quero falar com atendente", "me chama um atendente", "me transfere", ou algo parecido, voc√™ deve PARAR de responder imediatamente. 
- S√≥ volte a falar se o cliente disser claramente que quer voltar a falar com voc√™, como: "pode voltar", "quero falar com a atendente virtual", etc.

üìç Informa√ß√µes da cl√≠nica:

**Nome completo:** Cefisio ‚Äì Centro Integrado de Sa√∫de S/S LTDA  
**Nome comum:** Cefisio Takemoto  
**Fundada em:** 1992  
**Endere√ßo:** Rua Roberto Trompowsky, 250 ‚Äì Centro (ilha), Joa√ßaba ‚Äì SC, CEP 89600-000  
**Telefone e WhatsApp:** (49) 3522-2654  
**Instagram:** @cefisio.takemoto  
**Facebook:** facebook.com/cefisio.takemoto  

üß¨ **Servi√ßos oferecidos:**  
- Fisioterapia geral  
- Fisioterapia dermato-funcional  
- Acupuntura  
- Osteopatia  
- Hidroterapia  
- Hidrogin√°stica  
- Nata√ß√£o  

üìé Exemplo de como se comportar:

Cliente: "Oi, voc√™s fazem acupuntura?"  
IA: "Fazemos sim! Quer agendar?"

Cliente: "Onde fica a cl√≠nica?"  
IA: "Ficamos na Rua Roberto Trompowsky, 250 ‚Äì Centro, Joa√ßaba."

Cliente: "Quero falar com atendente."  
IA: [voc√™ deve parar de responder at√© ser chamada de volta]

üìå Seja simp√°tica, objetiva e √∫til. Seu foco √© facilitar o atendimento.

üìå Nunca invente informa√ß√µes, e evite explica√ß√µes longas.
Tamb√©m evite falar de forma seca, como quando perguntarem se oferecemos o servi√ßo X voce falar um "N√£o.", informe que n√£o oferecemos e fa√ßa uma contra oferta se fizer sentido.
`;

// Armazenar hist√≥rico de conversa por chatId
const conversationHistory = new Map<
  string,
  Array<{ role: string; parts: string }>
>();

// Tempo limite para considerar uma conversa "expirada" (em milissegundos)
const CONVERSATION_TIMEOUT = 30 * 60 * 1000; // 30 minutos
const lastActivity = new Map<string, number>();

/**
 * Limpa conversas inativas periodicamente
 */
export function inicializarLimpezaDeConversas(): void {
  setInterval(() => {
    const now = Date.now();
    for (const [chatId, lastTime] of lastActivity.entries()) {
      if (now - lastTime > CONVERSATION_TIMEOUT) {
        conversationHistory.delete(chatId);
        lastActivity.delete(chatId);
        logger.info(`Conversa expirada para ${chatId}`);
      }
    }
  }, 5 * 60 * 1000); // Verifica a cada 5 minutos
}

/**
 * Gera uma resposta da IA mantendo o hist√≥rico da conversa
 */
export async function gerarRespostaComHistorico(
  chatId: string,
  mensagem: string
): Promise<string> {
  try {
    // Atualiza o timestamp de √∫ltima atividade
    lastActivity.set(chatId, Date.now());

    // Inicializa o hist√≥rico se n√£o existir
    if (!conversationHistory.has(chatId)) {
      conversationHistory.set(chatId, [
        { role: "user", parts: "Ol√°" },
        {
          role: "model",
          parts:
            "Ol√°! Sou Ana, assistente virtual da Vitaterapia. Como posso ajudar voc√™ hoje?",
        },
      ]);
    }

    // Obt√©m hist√≥rico atual
    const history = conversationHistory.get(chatId)!;

    // Adiciona a nova mensagem do usu√°rio ao hist√≥rico
    history.push({ role: "user", parts: mensagem });

    // Cria uma sess√£o de chat com o hist√≥rico
    const chat = model.startChat({
      history: history.slice(0, -1).map((msg) => ({
        role: msg.role,
        parts: [{ text: msg.parts }],
      })), // Exclui a mensagem mais recente que acabamos de adicionar
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 200, // Limita o tamanho da resposta
      },
    });

    // Envia a mensagem mais recente
    const result = await chat.sendMessage(
      `${systemPrompt}\n\nUsu√°rio: ${mensagem}`
    );
    const resposta = await result.response.text();

    // Adiciona a resposta ao hist√≥rico
    history.push({ role: "model", parts: resposta });

    // Limita o tamanho do hist√≥rico para n√£o crescer infinitamente
    if (history.length > 20) {
      // Mant√©m a primeira intera√ß√£o (apresenta√ß√£o) e as 19 mais recentes
      const firstInteraction = history.slice(0, 2);
      const recentInteractions = history.slice(-18);
      conversationHistory.set(chatId, [
        ...firstInteraction,
        ...recentInteractions,
      ]);
    }

    logger.info(`Resposta para ${chatId}: ${resposta.substring(0, 50)}...`);
    return resposta;
  } catch (error: any) {
    logger.error(`Erro ao gerar resposta: ${error.message}`);
    return "Desculpe, estou com dificuldades t√©cnicas no momento. Pode tentar novamente mais tarde?";
  }
}
